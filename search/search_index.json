{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Muhammad Fouly's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/code-command/","title":"Setting Up the <code>code</code> Command in Your Terminal","text":"<p>This tutorial will guide you through enabling the <code>code</code> command in your terminal, allowing you to quickly open projects or folders in Visual Studio Code using the command line.</p>"},{"location":"tutorials/code-command/#step-1-add-the-code-command-to-your-path","title":"Step 1: Add the <code>code</code> Command to Your PATH","text":"<ol> <li>Open Visual Studio Code.</li> <li>Press <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P</code> on Mac) to open the Command Palette.</li> <li>Type:Shell Command: Install 'code' command in PATH</li> <li>Select the option and confirm. This will add the <code>code</code> command to your terminal's <code>$PATH</code>.</li> </ol>"},{"location":"tutorials/code-command/#step-2-test-the-code-command","title":"Step 2: Test the <code>code</code> Command","text":"<ol> <li>Open your terminal.</li> <li>Navigate to the folder you want to open in VS Code (for example, <code>rust-dev-cont</code>): <pre><code>cd /path/to/rust-dev-cont\n</code></pre></li> <li>Run: <pre><code>code . \n</code></pre></li> </ol> <p>Note</p> <p>You can specifiy a file or directory after the <code>code</code> command but <code>code .</code> just opens the current directory you are in with all of its contents and its more typical and convenient.</p> <p>Warning</p> <p>If the code command doesn't work, restart your terminal for the changes to take effect.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Muhammad Fouly</li> <li>Reviewer: Mohammad Saatialsoruji</li> </ul> <p>Success</p> <p>I have successfuly added admonitions to MkDocs!  This is just an example of admonitions you will see throughout this tutorial for the purpose side content without disturbing document flow :)</p> <pre><code># I have added the code block extention for my partner - Mohammad Saatialsoruji\n# Code blocks are an essential part of project documentation\n# We will see these many times throughout the tutorial\nprint(\"We love COMP 423!\")\n</code></pre>"},{"location":"tutorials/rust-setup/#welcome","title":"Welcome","text":"<p>This tutorial will provide step-by-step instructions for creating a Development (Dev) Container in Rust.</p> <p>Info</p> <p>This tutorial is highly inspired by a previous tutorial my professor Kris Jordan had already made so you might see a lot of similarities and I would highly recommend you check his out!</p>"},{"location":"tutorials/rust-setup/#lets-start-with-the-prerequisites","title":"Let's start with the prerequisites","text":"<p>Before we dive in, make sure you have the following if you don't already:</p> <ol> <li>A GitHub account: Sign up at GitHub.</li> <li>Git installed: Install Git.</li> <li>Visual Studio Code (VS Code): Download and install VSCode.</li> <li>Docker installed:Get Docker here. This is required to run the container.</li> </ol> <p>Note</p> <p>For this tutorial, you do not need to install anything other than VSCode, Docker, and Git. You should not install Rust. That is the role of the dev container! Remember, we are trying to minimize the things we have to manually download and install. I will say, though, you should be comfortable and have a little bit of command line knowledge. Your 211 knowledge should serve you well here!</p>"},{"location":"tutorials/rust-setup/#part-1-project-setup-setting-up-your-directory-git-and-github","title":"Part 1: Project setup (Setting up your directory, Git, and GitHub)","text":""},{"location":"tutorials/rust-setup/#step-1-creating-a-directory-and-a-local-git-repository","title":"Step 1: Creating a directory and a local Git Repository","text":"<ul> <li>Open your terminal or command prompt.</li> <li>Create a new directory: <pre><code>mkdir rust-dev-cont\ncd rust-dev-cont\n</code></pre></li> <li>Initialize a new Git repository <pre><code>git init\n</code></pre></li> <li>Create a README file and add the following: <pre><code>echo \"# Building a Dev Container in Rust\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></li> </ul> <p>Note</p> <p>The command <code>echo</code> sends the string in quotation marks to the specified place. Usually without any place to go, it just sends it back to stdout which is your terminal by default. However, if you have taken 211 before, you know that the <code>&gt;</code> operator writes whatever is on the left of it (which could be the output of a program) to the specified place on the right. If the file does not exist already, it creates it.</p>"},{"location":"tutorials/rust-setup/#step-2-creating-a-remote-repository","title":"Step 2: Creating a remote repository","text":"<ol> <li>Log in to your GitHub account and navigate to the Create a New Repository page.</li> <li>Fill in the details as follows:<ul> <li>Repository Name: rust-dev-cont</li> <li>Description: \"Personal project for starting a Dev Container in Rust\"</li> <li>Visibility: Public</li> </ul> </li> <li>Do not initialize the repository with a README, .gitignore, or license.</li> <li>Click Create Repository.</li> </ol>"},{"location":"tutorials/rust-setup/#step-3-link-you-local-repository-to-github","title":"Step 3: Link you Local Repository to GitHub","text":"<ol> <li>Add the GitHub repository as a remote:  <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/rust-dev-cont.git\n</code></pre> Replace <code>&lt;your-username&gt;</code> with your GitHub username.</li> <li> <p>Check your default branch name with the subcommand <code>git branch</code>. If it's not <code>main</code>, rename it to <code>main</code> with the following command: <code>git branch -M main</code>. Old versions of <code>git</code> use the name <code>master</code> for the primary branch. However, <code>main</code> is the standard primary branch name ever since 2020.</p> </li> <li> <p>Push your local commits to the GitHub repository: <pre><code>git push --set-upstream origin main\n</code></pre></p> </li> </ol> <p>Note</p> <p><code>git push --set-upstream origin main</code>: This command pushes the <code>main</code> branch to the remote repository <code>origin</code> (Usually, the default name given to the remote repository). The <code>--set-upstream</code> flag sets up the <code>main</code> branch to track the remote branch <code>origin/main</code>, meaning future pushes and pulls can be done without specifying the branch name and just writing <code>git push origin</code> (or just <code>git push</code> if you only have one remote) when working on your local <code>main</code> branch. This long flag has a corresponding <code>-u</code> short flag that you can use as you are more comfrotable with working with flags.</p> <p>You can now refresh your GitHub repository in your browser to see that the same commit you made locally has now been pushed to remote. You can also use <code>git log</code> locally to see the commit ID and message which should match the ID of the most recent commit on GitHub.</p>"},{"location":"tutorials/rust-setup/#part-2-setting-up-the-development-environment","title":"Part 2: Setting up the Development Environment","text":"<p>Before you begin developing in Rust, you need to set up your development environment! </p>"},{"location":"tutorials/rust-setup/#what-is-a-development-dev-container","title":"What is a Development (Dev) Container?","text":"<p>In essence, a dev container is a preconfigured environment defined by a set of configuration files usually using Docker to create isolated setups for development. You can think of it as a mini computer running inside your computer that includes everything you need to work on a specific project. Your dev container will include the right programming language, tools, libraries and dependencies. This is why you don't need to install Rust for the purpose of this tutorial. The dev container ensures that your development environment is consistent and works across different machines.</p>"},{"location":"tutorials/rust-setup/#why-is-this-valuable","title":"Why is this valuable?","text":"<p>In the tech industry, teams often work on complex projects that require a specific set of tools and dependencies to function correctly. Without a dev container, each developer must manually set up their environment. You can only imagine how much it can lead to errors, wasted time, and inconsistencies. With a dev container:</p> <ul> <li>Everyone works in an identical environment, reducing bugs caused by \"it works on my machine\" issues.</li> <li>Onboarding new team members becomes faster and easier, as they can start coding with just a few steps.</li> <li>Dependencies and tools remain isolated, avoiding conflicts with other projects or the local system.</li> <li>A container also uses the same image everytime it is ran which means if you modify something in the image or accidentally delete something, a simple reboot of the container will fix everything and save you much pain :)</li> </ul>"},{"location":"tutorials/rust-setup/#how-are-software-project-dependencies-managed","title":"How are Software Project Dependencies Managed?","text":"<p>To effectively manage software dependencies, it's important to use a reliable package manager. Dependencies are external libraries or tools that your project relies on, and managing them ensures your project uses the correct versions, avoiding compatibility issues.</p>"},{"location":"tutorials/rust-setup/#dependency-management-in-rust","title":"Dependency Management in Rust","text":"<p>In Rust, dependencies are managed using Cargo, the package manager and build system. Cargo automates tasks like:  </p> <ol> <li>Declaring Dependencies: Dependencies are specified in the <code>Cargo.toml</code> file.  </li> <li>Installing Dependencies: Cargo fetches and installs the required libraries from crates.io.  </li> <li>Ensuring Consistency: The <code>Cargo.lock</code> file ensures that all team members use the exact same dependency versions.</li> </ol> <p>For example, in the <code>Cargo.toml</code> file: <pre><code>[dependencies]\nserde = \"1.0\"\n</code></pre> We will see an example of this later on!</p>"},{"location":"tutorials/rust-setup/#step-1-add-development-container-configuration","title":"Step 1: Add Development Container Configuration","text":"<ol> <li>In VS Code, open the <code>rust-dev-cont</code> directory. You can do this via: File &gt; Open Folder.</li> <li>Install the Dev Containers extension for VS Code.</li> <li>Create a <code>.devcontainer</code> directory in the root of your project with the following file inside of this \"hidden\" configuration directory:  </li> </ol> <p><code>.devcontainer/devcontainer.json</code></p>"},{"location":"tutorials/rust-setup/#want-a-shortcut-to-open-projects-in-vs-code","title":"Want a Shortcut to Open Projects in VS Code?","text":"<p>For more convenience, you can set up the <code>code</code> command in your terminal, allowing you to open projects directly from the command line. Check out my tutorial here!</p> <p>The <code>devcontainer.json</code> file defines the configuration for your development environment. Here, we're specifying the following:</p> <ul> <li><code>name</code>: A descriptive name for your dev container.</li> <li><code>image</code>: The Docker image to use, in our case, the latest version of a Rust environment. Microsoft maintains a collection of base images for many programming language environments, but you can also create your own!</li> <li><code>customizations</code>: Adds useful configurations to VS Code, like installing the Rust Analyzer extension. When you search for VS Code extensions on the marketplace, you will find the string identifier of each extension in its sidebar (e.g. <code>rust-lang.rust-analyzer</code>). Adding extensions here ensures other developers on your project have them installed in their dev containers automatically. Remember, we are trying to get rid of manually installing a bunch of software.</li> <li><code>postCreateCommand</code>: A command to run after the container is created. In our case, we do not need to install anything extra for us to print a simple string in Rust. <pre><code>{\n  \"name\": \"My Rust Dev Container\",\n  \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {},\n      \"extensions\": [\"rust-lang.rust-analyzer\"]\n    }\n  },\n  \"postCreateCommand\": \"\"\n}\n</code></pre></li> </ul>"},{"location":"tutorials/rust-setup/#step-2-reopen-the-project-in-a-vscode-dev-container","title":"Step 2. Reopen the Project in a VSCode Dev Container","text":"<p>Reopen the project in the container by pressing Ctrl+Shift+P (or Cmd+Shift+P on Mac), typing \"Dev Containers: Reopen in Container,\" and selecting the option. This will take a few minutes for the first time to download and install the image and everything.</p> <p>Once your dev container setup completes, open a new terminal pane within VSCode, and try running <code>rustc --version</code> to see your dev container is running a recent version of Rust without you having to even manually download or install anything! (As of January 2025, the latest stable Rust version is 1.83.0.) The <code>latest</code> keyword in the <code>image</code> specification should take care of making sure you have the latest version!</p>"},{"location":"tutorials/rust-setup/#part-3-developing-in-rust","title":"Part 3: Developing in Rust","text":""},{"location":"tutorials/rust-setup/#creating-a-new-package","title":"Creating a New Package","text":"<p>To start a new package with Cargo, use cargo new: <pre><code>cargo new hello_world --vcs none\n</code></pre> The <code>--vcs none</code> flag tells cargo to not create a git repository for you which is the default behavior.  </p> <p>Warning</p> <p>If you forgot the <code>--vcs none</code> flag, it's no problem. You can run the following commands to delete the Git repository. <pre><code>cd hello_world\nrm -rf .git\n</code></pre> This removes the Git repository from the project while keeping the project files.</p>"},{"location":"tutorials/rust-setup/#lets-check-out-what-cargo-has-created","title":"Let's check out what Cargo has created:","text":"<p>Run the following commands: <pre><code>cd hello_world\ntree\n</code></pre> The output should be something like: <pre><code>.\n\u251c\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 main.rs\n\n2 directories, 2 files\n</code></pre> You can checkout the Cargo.toml in VSCode to see something like this (Hint: this is what we talked about up there ^^^):</p> <p><pre><code>[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\n</code></pre> This is called a manifest, and it contains all of the metadata that Cargo needs to compile your package. This file is written in the TOML format.</p> <p>Here\u2019s what\u2019s in <code>src/main.rs</code>: <pre><code>fn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre> Cargo generated a \u201chello world\u201d program for you, otherwise known as a binary crate. Let\u2019s compile it but first change it to be the follwing:</p> <pre><code>fn main() {  //fn stands for function\n    println!(\"HELLO COMP423\");\n}\n</code></pre>"},{"location":"tutorials/rust-setup/#finally-compiling-and-running","title":"Finally... Compiling and Running","text":"<p>We can now compile like so:</p> <pre><code>cargo build\n   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n</code></pre> <p>The <code>cargo build</code> command compiles your Rust project and generates an executable kind of like the C language's <code>gcc [filename.c] -o [output_filename]</code> command that you may remember from COMP 211 which compiles the specified file and creates an executable object file to run the program.</p>"},{"location":"tutorials/rust-setup/#how-it-works","title":"How It Works","text":"<p>Compilation: <code>cargo build</code> compiles your project and places the resulting binary or library in the <code>target/debug</code> directory by default.</p> <p>Default Build Mode: By default, <code>cargo build</code> compiles in debug mode. Debug builds prioritize faster compilation and include debug symbols, making them suitable for development and testing.</p> <p>After building, the binary (executable) will be located in: <pre><code>target/debug/hello_world\n</code></pre></p> <p>You can finally run the executable manually to see the desired output: <pre><code>./target/debug/hello_world\n</code></pre></p> <p>You can also use the following command to compile and then run it, all in one step: <pre><code>cargo run\n</code></pre></p> <p>You should now see: <pre><code>HELLO COMP423\n</code></pre></p> <p>Success</p> <p>Congratulations! You have built a development container in Rust!</p>"},{"location":"tutorials/rust-setup/#part-4-pushing-to-github","title":"Part 4: Pushing to GitHub","text":"<p>You can now run the following commands in order to push your amazing new Dev Container project to GitHub for the world to see!</p> <pre><code>git add . # this is for staging your changes\ngit commit -m \"Successfully printed HELLO COMP423 with my own Rust Dev Container\"\ngit push\n</code></pre> <p>Congrats you have now finished the tutorial and the whole world can see your amazing work on GitHub!</p>"},{"location":"tutorials/rust-setup/#references","title":"References","text":"<ol> <li> <p>Kris Jordan\u2019s COMP 423 Tutorial    Inspiration and structure for this tutorial.</p> </li> <li> <p>Rust Documentation: Creating a New Project    Official guide to creating a new Rust project with Cargo.</p> </li> <li> <p>Rust: Learn Rust    Rust's official learning resource.</p> </li> <li> <p>MkDocs Material Documentation    Comprehensive guide to using MkDocs Material.</p> </li> <li> <p>Markdown Guide: Basic Syntax    A beginner-friendly guide to Markdown syntax.</p> </li> </ol>"}]}